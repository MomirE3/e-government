// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Enumerations
enum RequestType {
  ID_CARD
  PASSPORT
  CITIZENSHIP
  DRIVING_LICENSE
}

enum RequestStatus {
  CREATED
  IN_PROCESS
  REJECTED
  APPROVED
  COMPLETED
}

enum InfractionType {
  DRUNK_DRIVING
  SPEEDING
  RED_LIGHT_VIOLATION
  NO_SEATBELT
}

// Models
model Citizen {
  id        String @id @default(cuid())
  jmbg      String @unique
  firstName String
  lastName  String
  email     String
  phone     String

  // Relationships
  requests   Request[]
  infractions Infraction[]
  address Address?

  @@map("citizens")
}

model Address {
  id           String   @id @default(cuid())
  street       String
  number       String
  city         String
  postalCode   String
  country      String
  validFrom    DateTime

  // One-to-one with Citizen
  citizenId String @unique
  citizen   Citizen @relation(fields: [citizenId], references: [id])

  @@map("addresses")
}

model Request {
  id              String        @id @default(cuid())
  caseNumber      String        @unique
  type            RequestType
  status          RequestStatus
  submissionDate  DateTime      @default(now())

  // Foreign keys
  citizenId String
  citizen   Citizen @relation(fields: [citizenId], references: [id])

  // One-to-one relationships
  appointment Appointment?
  payment     Payment?
  document    Document?

  @@map("requests")
}

model Infraction {
  id           String         @id @default(cuid())
  dateTime     DateTime
  municipality String
  description  String
  penaltyPoints Int
  fine         Decimal        @db.Decimal(10, 2)
  type         InfractionType

  // Foreign key
  citizenId String
  citizen   Citizen @relation(fields: [citizenId], references: [id])

  @@map("infractions")
}

model Appointment {
  id        String   @id @default(cuid())
  dateTime  DateTime
  location  String
  status    String

  // Foreign key
  requestId String @unique
  request   Request @relation(fields: [requestId], references: [id])

  @@map("appointments")
}

model Payment {
  id           String   @id @default(cuid())
  amount       Decimal  @db.Decimal(10, 2)
  currency     String
  referenceNumber String
  status       String
  timestamp    DateTime @default(now())

  // Foreign key
  requestId String @unique
  request   Request @relation(fields: [requestId], references: [id])

  @@map("payments")
}

model Document {
  id          String   @id @default(cuid())
  name        String
  type        String
  issuedDate  DateTime

  // Foreign key
  requestId String @unique
  request   Request @relation(fields: [requestId], references: [id])

  @@map("documents")
}

